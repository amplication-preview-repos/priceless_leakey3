/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlogAuthor } from "./BlogAuthor";
import { BlogAuthorCountArgs } from "./BlogAuthorCountArgs";
import { BlogAuthorFindManyArgs } from "./BlogAuthorFindManyArgs";
import { BlogAuthorFindUniqueArgs } from "./BlogAuthorFindUniqueArgs";
import { DeleteBlogAuthorArgs } from "./DeleteBlogAuthorArgs";
import { BlogAuthorService } from "../blogAuthor.service";
@graphql.Resolver(() => BlogAuthor)
export class BlogAuthorResolverBase {
  constructor(protected readonly service: BlogAuthorService) {}

  async _blogAuthorsMeta(
    @graphql.Args() args: BlogAuthorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlogAuthor])
  async blogAuthors(
    @graphql.Args() args: BlogAuthorFindManyArgs
  ): Promise<BlogAuthor[]> {
    return this.service.blogAuthors(args);
  }

  @graphql.Query(() => BlogAuthor, { nullable: true })
  async blogAuthor(
    @graphql.Args() args: BlogAuthorFindUniqueArgs
  ): Promise<BlogAuthor | null> {
    const result = await this.service.blogAuthor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlogAuthor)
  async deleteBlogAuthor(
    @graphql.Args() args: DeleteBlogAuthorArgs
  ): Promise<BlogAuthor | null> {
    try {
      return await this.service.deleteBlogAuthor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
