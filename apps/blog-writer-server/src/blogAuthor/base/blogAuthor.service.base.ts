/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BlogAuthor as PrismaBlogAuthor } from "@prisma/client";

export class BlogAuthorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlogAuthorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blogAuthor.count(args);
  }

  async blogAuthors(
    args: Prisma.BlogAuthorFindManyArgs
  ): Promise<PrismaBlogAuthor[]> {
    return this.prisma.blogAuthor.findMany(args);
  }
  async blogAuthor(
    args: Prisma.BlogAuthorFindUniqueArgs
  ): Promise<PrismaBlogAuthor | null> {
    return this.prisma.blogAuthor.findUnique(args);
  }
  async createBlogAuthor(
    args: Prisma.BlogAuthorCreateArgs
  ): Promise<PrismaBlogAuthor> {
    return this.prisma.blogAuthor.create(args);
  }
  async updateBlogAuthor(
    args: Prisma.BlogAuthorUpdateArgs
  ): Promise<PrismaBlogAuthor> {
    return this.prisma.blogAuthor.update(args);
  }
  async deleteBlogAuthor(
    args: Prisma.BlogAuthorDeleteArgs
  ): Promise<PrismaBlogAuthor> {
    return this.prisma.blogAuthor.delete(args);
  }
}
